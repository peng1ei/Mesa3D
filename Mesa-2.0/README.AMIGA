Short:	 3D library, OpenGL based, Amiga v1.1
Uploader: d94sz@efd.lth.se (Stefan Zivkovic)
Author:	 brianp@ssec.wisc.edu (BrianP) Amiga Port: d94sz@efd.lth.se (Stefan Zivkovic)
Type: 	 dev/c
Requires: System v39, SAS C Compiler
Version:  Mesa v2.0 Amiga version 1.4



				The Mesa 3-D graphics library

					Version 2.0

			 Copyright (C) 1995-1996  Brian Paul



Introduction
============

Mesa is a 3-D graphics library with an API which is very similar to that
of OpenGL*.  To the extent that Mesa utilizes the OpenGL command syntax
or state machine, it is being used with authorization from Silicon Graphics,
Inc.	However, the author makes no claim that Mesa is in any way a
compatible replacement for OpenGL or associated with Silicon Graphics, Inc.
Those who want a licensed implementation of OpenGL should contact a licensed
vendor.	This software is distributed under the terms of the GNU Library
General Public License, see the LICENSE file for details.

* OpenGL(R) is a registered trademark of Silicon Graphics, Inc.

Miscellaneous
=============

There is a Amiga Mesa WWW page:	http://www.efd.lth.se/~d94sz/amesa
and the orginal  Mesa WWW page:	http://www.ssec.wisc.edu/~brianp/Mesa.html


Since the OpenGL API is used, OpenGL documentation can serve as the
documentation for Mesa's core functions.  Here are a few sources:

  Man pages:	 http://www.digital.com:80/pub/doc/opengl/
  Spec doc: 	 http://www.sgi.com/Technology/openGL/glspec/glspec.html


Author
======

Brian Paul
Space Science and Engineering Center
University of Wisconsin - Madison
1225 W. Dayton St.
Madison, WI  53706

brianp@ssec.wisc.edu


AMIGA PORT of MESA: THE OPENGL SOFTWARE EMULATION by Stefan Zivkovic
====================================================================
When I first read about OPENGL in the summer of 1995 I was happy and filled with
joy. A few days later I surfed to the mesa homepage but only to discover that 
there was no Amiga version. In the beginning of 1996 someone released a AMIWIN
version so I took the archive home to try it out, but it stayed packed on my HD.
One day when I was home and poking around with my HD I saw the archive and
started to try to make it work. Without luck as it seemed that you needed 
the AMIWIN Includes and LIBFILES. But I also discovered that it was possible
to port it with not to much effort (WRONG THERE) so I begun.

For the Amiga there is only three important files + one directory.

src/Amigamesa.c		The mesa GL Amiga implementation 
			(ddsample.c with some Amiga code)
src-tk/Awindow.c	The tk (and aux) machine specific code)
include/GL/Amigamesa.h	The prototypes for Amigamesa

Amiga/#?

Installing
==========
To spread the amiga files over the archive you will nead lha in your path
and run the installer script in /amiga (or just unpack AMesa.lha yourself)

Compiling
=========
Just execute mklib.amiga (will apeare if you have instelled it correctly)

About the code.
===============
The Code is compiled with cpu=020 math=ieee 
If you would like it different then use the /Amiga/scoptions read next statement

The common scoptions file is in /Amiga
Here exists a scoption that is used in the WHOLE package, chance math here
and it will reflect in all dirs

In /Amiga/library there is previews of files to the shared-library version
(This don't work yet but should give you an idea of how to use it)

In /Amiga/Examples there should be some amiga-demo code,
but I've got no code yet so feel free to send me your own examples.

In this state it only renders on a window on a up-to 256 col display but I
have planes to port it to CyberGFX the problem is that I don't own a gfx-card
so this is very low on my priority list, this could change if I had one :)

all tk actions in tkExec are not finished. But most of them is. (low priority)

Most of the examples work. (ALL?)

etc. etc.

Write your own OpenGL code
==========================
1. For a easy start look at the examples in book and modify them
   The examples uses a portable layer toolkit Not amiga specific at all

until The shared library is ready you have to define AMIGALIB when
using <GL/gl.h>

2. For a better amigaprogram just open a window (on your favourite screen) and
	add a few lines in your source:

-----------------------------------------------------------------------------
/* ADD where you want it  */
#include <GL/gl.h>

Init()		 /* sets up viewport and projections */
  {
  glMatrixMode (GL_PROJECTION);	  /*	prepare for and then */ 
  glLoadIdentity (); 		/*  define the projection */
  glFrustum (-1.0, 1.0, -1.0, 1.0, 1.5, 20.0);/*  transformation */
  glMatrixMode (GL_MODELVIEW);	/*  back to modelview matrix*/
  glViewport (0, 0, 200, 200);	/*  define the viewport 	*/
}	 /*		  ^  ^  ^^^  ^^^--- The size of the mesa/openGL window  */
	


/* ADD In after you opened your window */

struct amigamesa_context *glcont;

	glcont=AmigaMesaCreateContextTags( 
						AMA_DrawMode,AMESA_AGA,
						AMA_Window,(unsigned long)		test_window,    // My Windowptr
						AMA_RastPort,(unsigned long)	test_window->RPort,
						AMA_Screen,(unsigned long)		test_window->WScreen,
						AMA_DoubleBuf,						GL_FALSE, // or GL_TRUE
						AMA_RGBMode,						GL_TRUE, //   -"-
						AMA_Left,							test_window->BorderLeft,  		// offset from left edgr
						AMA_Bottom,							test_window->BorderBottom+1,	// offset from bottom edgr
						TAG_DONE,0);

// Neaded tags is   AMA_RastPort,AMA_Screen   if you suply AMA_Window
// it looks for RastPort and Screen in it so a Window_ptr will due.

if (glcont)
 {
 AmigaMesaMakeCurrent(glcont);
 /* All your gl comands */
 /*handle_window_events(test_window);	or whatever */
 AmigaMesaDestroyContext(glcont);
}

/* Don't forget to call glViewport() when you resize the window */
------------------------------------------------------------------------------
if you set doublebuff to GL_TRUE then you just switch buffer with
AmigaMesaSwapBuffers(glcont);

For more info of the internal of the Amiga port you can check the files
  src/Amigamesa.c and include/GL/Amigamesa.h for tk check src-tk/Awindow.c
And info on how do write your own gfx-rutines se include/GL/amigamesa.h for
more instructions

THINGS THAT MAY GO WRONG
========================
WARNIG The api has changes on AmigaMesaCreateContext() it now is called with
	a taglist see /include/GL/amigamesa.h


If it won't compile check your env:sc/scoptions maybe there is some conflict
	for example this setings are vitale Precision=MIXED, NoStackExtend,
	NoStackCheck. If your not sure just rename your env:sc/scoptions while compiling

It compiles but all examples crash everytime: 
	Set your stack high about 50kb or more.

Linking complains about not finding _glBegin(): or @glBegin():
	You have compiled some code using the stack and som using registers as
	parameter pasing, You have to chose one of them and us it on both places.

The color are realy bad:
	To emulate 24bit I alloc 255 colors in the begining spread over the
	palette and then use it. If you like better color buy a GFX-Card.
	And wait for gfx-card versions.

Resizing is sometimes very very unhelthy.


LATEST VERSION:
===============

http://www.efd.lth.se/~d94sz/amesa

TODO:
=====
Fix resizing bug.
all tk stuff.


FUTURE:
=======
The API will probably change a little.( Long names -> shorter ex
			  AmigaMesaDestroyContext renames to MesaDestroyContext...)
A shared library would be nice. (I have started)
Faster and better. (I have a few ideas)
CyberGFX support. (I don't have a Gfx card myself any offer to
						 give me one would result in CyberGFX support :)

HISTORY:
========
		
Release:
0.8 This code worked with Mesa 1.2.6 and all makefiles also.
	 Due to when I released it Mesa 1.2.7 was released and some changes was made
	 it didn't work.

0.9 Makefiles is remapped to work with Mesa 1.2.7.
	 Double buffering works.
	 Implemented fast_poly_draw (big speed improvement).
	 tkExec a few more tests were done. (right & middle mousebutton is not
	 implemented)

1.0 I've put a common scoption file in /Amiga (thanks to Kamil Iskra).
	 Due to the common scoptions you could change CPU and math more easy ,and
	 compiler options set to default math=ieee, cpu=020 so that it works on 
	 1200's and up 
	 Many bugfixes (thanks to Daniel Jönsson).
	 Have fixed the smakefile name collision with AMIWIN version.
	 Mesa 1.2.8 Fixed.
	 Spellcorrection of the docs were made by Peter Sandén.
	 All tk's windows are opened on a pubscreen named "MESA" if it exists.

1.1 Faster and more stable (Manny thanks to Jorge Acereda (JAM))
	 Faster pen usage now it allocates 255 pens and use them (thanks to
	 Stefan Burström)
	 A few enchantments here and there.
	 Fixed a smake bug ignore=A only works in the lates SAS version  now I
	 have changed it to IGN=ALL (Thanx to everyone who reported this one)

1.2 Removed math from smakefiles SAS handles this better self. (Kamil Iskra)
	 Fixed a serius drawing bug (appered when using GL_SMOTH).
    Fixed a very flexible programing API for future gfx-board implementations
	 Added a BOOL AmigaMesaSetDefs(struct TagItem *tagList); usefull for future encantments
    ***'API change: AmigaMesaCreateContext uses taglist se include/GL/amigamesa.h
    Faster on dubelbuffer rendering. (Now i convert whole dubel buffer c2p)
    Easier to integrate future gfx-cards rutines. look in include/GL/amigamesa.h
    tk toolkit fixed to work better thanks to Georg 'Wulf' Krämer

1.4 Uppdated to reflect Mesa 2.0
	 Small Bugfixes.
    
Please contact me with suggestions and additional info. 
You can reach me at: 

d94sz@efd.lth.se

Or mail:

Stefan Zivkovic
Kämnärsv. 9L:225
226 46 LUND

Or Phone:
+46 46 150763
